<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aircat&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangzhanbang.github.io/"/>
  <updated>2018-12-04T13:04:56.065Z</updated>
  <id>https://zhangzhanbang.github.io/</id>
  
  <author>
    <name>aircat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018.12.04</title>
    <link href="https://zhangzhanbang.github.io/2018/12/04/2018-12-04/"/>
    <id>https://zhangzhanbang.github.io/2018/12/04/2018-12-04/</id>
    <published>2018-12-04T12:29:02.000Z</published>
    <updated>2018-12-04T13:04:56.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nowcoder-296B-Origami"><a href="#nowcoder-296B-Origami" class="headerlink" title="nowcoder 296B-Origami"></a>nowcoder 296B-Origami</h2><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><blockquote><p>有一条有n个格子的纸条，纸条从左到右写着数字1至n。</p><p>可进行：左折或右折（以格子间分割线任意折叠）</p><p>折到最后，纸条的宽度仅为一个格子，从上往下读取格子的数字得到一个排列。</p><p>询问：给出一些排列，问排列能否通过上面的操作得到</p></blockquote><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p>不管怎样，当天就是爆零了，可能思路被带偏，不过最终还是自己的问题。</p><p>比赛时第一个想法是相邻的数字肯定是连在一起的，然后会有什么方法判断，没多想。</p><p>然后有人跟我说，数字大小和位置相邻能不能考虑一下，然后突然觉得很可做，就偏了。</p><p>正解跟第一个想法是相关的。</p><hr><p>以上都是个人的吐槽。</p><p>先模拟一下纸的折叠，会发现若一个方格可分为左右折痕。</p><p>假设2k+1与2k+2的折痕为左折痕，那么2k与2k+1为右折痕。</p><p>若在相邻数字间按左右折痕，在左右两边连线，那么这些线段在每一边都只能完全覆盖或是相离，若出现相交的情况，则无法通过折叠得出。</p><p>因此，只需判断左右两边线段是否出现了相交的情况即可。（在任意一边，每个点上最多有一条线段）</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for (int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], rk[N];</span><br><span class="line"><span class="keyword">int</span> s1[N], s2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> cas;</span><br><span class="line">true<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cas);</span><br><span class="line">true<span class="keyword">while</span> (cas --)</span><br><span class="line">true&#123;</span><br><span class="line">truetrue<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">truetrueREP(i, <span class="number">1</span>, n) </span><br><span class="line">truetruetrue<span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i), rk[a[i]] = i;</span><br><span class="line">truetrueREP(i, <span class="number">1</span>, n+<span class="number">1</span>) s1[i] = s2[i] = <span class="number">0</span>;</span><br><span class="line">truetrueREP(i, <span class="number">1</span>, n<span class="number">-1</span>)</span><br><span class="line">truetrue&#123;</span><br><span class="line">truetruetrue<span class="keyword">int</span> l = rk[i], r = rk[i+<span class="number">1</span>];</span><br><span class="line">truetruetrue<span class="keyword">if</span> (l &gt; r) swap(l, r);</span><br><span class="line">truetruetrue<span class="keyword">if</span> (i&amp;<span class="number">1</span>) s1[l] ++, s1[r+<span class="number">1</span>] --;</span><br><span class="line">truetruetrue<span class="keyword">else</span> s2[l] ++, s2[r+<span class="number">1</span>] --;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrueREP(i, <span class="number">2</span>, n+<span class="number">1</span>) s1[i] += s1[i<span class="number">-1</span>], s2[i] += s2[i<span class="number">-1</span>]; </span><br><span class="line">truetrue<span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line">truetrueREP(i, <span class="number">1</span>, n<span class="number">-1</span>)</span><br><span class="line">truetrue&#123;</span><br><span class="line">truetruetrue<span class="keyword">int</span> l = rk[i], r = rk[i+<span class="number">1</span>];</span><br><span class="line">truetruetrue<span class="keyword">if</span> (l &gt; r) swap(l, r);</span><br><span class="line">truetruetrue<span class="keyword">if</span> ((i&amp;<span class="number">1</span>) &amp;&amp; s1[l] != s1[r]) &#123; check = <span class="literal">false</span>; <span class="keyword">break</span> ; &#125;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (!(i&amp;<span class="number">1</span>) &amp;&amp; s2[l] != s2[r]) &#123; check = <span class="literal">false</span>; <span class="keyword">break</span> ; &#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">if</span> (check) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">truetrue<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nowcoder-296B-Origami&quot;&gt;&lt;a href=&quot;#nowcoder-296B-Origami&quot; class=&quot;headerlink&quot; title=&quot;nowcoder 296B-Origami&quot;&gt;&lt;/a&gt;nowcoder 296B-Origami&lt;/
      
    
    </summary>
    
    
      <category term="模型转化" scheme="https://zhangzhanbang.github.io/tags/%E6%A8%A1%E5%9E%8B%E8%BD%AC%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hello under_world</title>
    <link href="https://zhangzhanbang.github.io/2018/12/04/hello-underworld/"/>
    <id>https://zhangzhanbang.github.io/2018/12/04/hello-underworld/</id>
    <published>2018-12-03T16:00:00.000Z</published>
    <updated>2018-12-04T12:24:01.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hello-Again-Under-World"><a href="#Hello-Again-Under-World" class="headerlink" title="Hello Again Under_World"></a>Hello Again Under_World</h3><p>​    算是第二次建博了，多年后还是选择了NexT（简洁+插件多+优秀）。</p><p>​    为接下来玩转NexT做好准备！</p><h3 id="建博指南"><a href="#建博指南" class="headerlink" title="建博指南"></a>建博指南</h3><p>​    <a href="https://yuuichung.github.io/2018/06/06/hexo-next-1/" target="_blank" rel="noopener">详见大佬Blog</a></p><p>​    只要认真看完123估计什么都会了    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hello-Again-Under-World&quot;&gt;&lt;a href=&quot;#Hello-Again-Under-World&quot; class=&quot;headerlink&quot; title=&quot;Hello Again Under_World&quot;&gt;&lt;/a&gt;Hello Again Under
      
    
    </summary>
    
      <category term="建博" scheme="https://zhangzhanbang.github.io/categories/%E5%BB%BA%E5%8D%9A/"/>
    
    
  </entry>
  
</feed>
